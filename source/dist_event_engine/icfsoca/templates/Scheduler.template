AWSTemplateFormatVersion: 2010-09-09
Description: (SOCA) - Deploy master host.
Parameters:
  SocaDomain:
    Type: String

  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id

  UpdateDnsLambdaArn:
    Type: String
  
  SubnetId:
    Type: AWS::EC2::Subnet::Id

  SecurityGroupId:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: For security reason, limit SSH to known networks

  SSHKeyPair:
    Type: AWS::EC2::KeyPair::KeyName

  ProxyPrivateDnsName:
    Type: String

  NoProxy:
    Type: String

  ProxyCACert:
    Type: AWS::SSM::Parameter::Value<String>

  RepositoryBucket:
    Type: String

  RepositoryFolder:
    Type: String
    
  SchedulerInstanceType:
    Type: String

  SchedulerIAMInstanceProfile:
    Type: String

  S3InstallBucket:
    Type: String

  S3InstallFolder:
    Type: String

  ClusterId:
    Type: String

  EFSAppsDns:
    Type: String

  EFSDataDns:
    Type: String

  ImageId:
    Type: AWS::EC2::Image::Id

  ComputeNodeCustomAMI:
    Type: AWS::EC2::Image::Id

  ComputeNodeBaseOS:
    Type: String

  Version:
    Type: String

  UserName:
    Type: String

  UserPassword:
    Type: String
    NoEcho: true

  SchedulerPublicIP:
    Type: String

  SchedulerPublicIPAllocation:
    Type: String

Resources:
  SchedulerEC2Host:
    Type: AWS::EC2::Instance
    # The scheduler configuration scripts have a dependency on Configuration which comes last
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT30M
    Properties:
      ImageId: !Ref ImageId
      DisableApiTermination: false
      InstanceType: !Ref SchedulerInstanceType
      IamInstanceProfile:
        Ref: SchedulerIAMInstanceProfile
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: 150
            VolumeType: gp2
            Encrypted: true

      KeyName: !Ref SSHKeyPair
      SecurityGroupIds: !Ref SecurityGroupId
      SubnetId: !Ref SubnetId

      Tags:
        - Key: Name
          Value: !Sub ${ClusterId}-Scheduler
        - Key: soca:KeepForever
          Value: true
        - Key: soca:ClusterId
          Value: !Sub ${ClusterId}
        - Key: soca:NodeType
          Value: scheduler
        - Key: soca:BackupPlan
          Value: !Sub ${ClusterId}

      UserData:
          "Fn::Base64": !Sub |
            #!/bin/bash -xe

            # Configure using ansible
            # This can be done before configuring the proxy because S3 is accessed using the S3 VPC endpoint
            amazon-linux-extras install -y ansible2
            aws s3 cp --recursive s3://${S3InstallBucket}/${S3InstallFolder}/playbooks/ /root/playbooks/
            cd /root/playbooks
            ansible-playbook scheduler.yml -e Region=${AWS::Region} -e Domain=${SocaDomain} -e S3InstallBucket=${S3InstallBucket} -e S3InstallFolder=${S3InstallFolder} -e ClusterId=${ClusterId} -e NoProxy=${NoProxy} -e NodeType=scheduler >> /root/ansible.log 2>&1

            source /etc/profile.d/proxy.sh

            # Signal Cloudformation if the instance creates successfully or not
            yum -y install -y aws-cfn-bootstrap
            function on_exit {
                /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource SchedulerEC2Host --region ${AWS::Region} || true
            }
            trap on_exit EXIT

            # Apply security patches
            yum -y update --security

            export PATH=$PATH:/usr/local/bin

            # If anything goes wrong then this prevents us from connecting via ssh and debugging.
            # Deactivate shell to make sure users won't access the cluster if it's not ready
            #echo '
            #************* SOCA FIRST TIME CONFIGURATION *************
            #Hold on, cluster is not ready yet.
            #Please wait ~30 minutes as SOCA is being installed.
            #Once cluster is ready to use, this message will be replaced automatically and you will be able to SSH.
            #*********************************************************' > /etc/nologin

            #usermod --shell /usr/sbin/nologin ec2-user

            # Disable automatic motd update if using ALI
            /usr/sbin/update-motd --disable
            rm -f /etc/cron.d/update-motd
            rm -f /etc/update-motd.d/*

            AWS=$(which aws)
            echo export "SOCA_BASE_OS=${ComputeNodeBaseOS}" > /etc/environment
            echo export "SOCA_CLOUDFORMATION_STACK=${AWS::StackName}" >> /etc/environment
            echo export "SOCA_CONFIGURATION=${ClusterId}" >> /etc/environment
            echo export "AWS_DEFAULT_REGION=${AWS::Region}" >> /etc/environment
            echo export "SOCA_INSTALL_BUCKET=${S3InstallBucket}" >> /etc/environment
            echo export "SOCA_INSTALL_BUCKET_FOLDER=${S3InstallFolder}" >> /etc/environment
            echo export "SOCA_VERSION=${Version}" >> /etc/environment
            echo export "SOCA_INSTALL_AMI=${ComputeNodeCustomAMI}" >> /etc/environment
            source /etc/environment

            # Tag EBS disks manually as CFN ASG does not support it
            AWS_AVAIL_ZONE=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone)
            AWS_REGION="`echo \"$AWS_AVAIL_ZONE\" | sed "s/[a-z]$//"`"
            AWS_INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
            EBS_IDS=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values="$AWS_INSTANCE_ID" --region $AWS_REGION --query "Volumes[*].[VolumeId]" --out text | tr "\n" " ")
            $AWS ec2 create-tags --resources $EBS_IDS --region $AWS_REGION --tags Key=Name,Value="${ClusterId} Root Disk" "Key=soca:ClusterId,Value=${ClusterId}"

            # Tag Network Adapter for the Scheduler
            ENI_IDS=$(aws ec2 describe-network-interfaces --filters Name=attachment.instance-id,Values="$AWS_INSTANCE_ID" --region $AWS_REGION --query "NetworkInterfaces[*].[NetworkInterfaceId]" --out text | tr "\n" " ")
            $AWS ec2 create-tags --resources $ENI_IDS --region $AWS_REGION --tags Key=Name,Value="${ClusterId} Scheduler Network Adapter" "Key=soca:ClusterId,Value=${ClusterId}"

            AWS=$(which aws)
            # Save parameters in a script so they aren't exposed in /var/log/messages
            echo "/root/SchedulerPostReboot.sh ${S3InstallBucket} ${S3InstallFolder} ${UserName} '${UserPassword}'" > /root/call-SchedulerPostReboot.sh
            chmod 0700 /root/call-SchedulerPostReboot.sh
            echo "@reboot $AWS s3 cp s3://${S3InstallBucket}/${S3InstallFolder}/scripts/SchedulerPostReboot.sh /root && chmod +x /root/SchedulerPostReboot.sh && /root/call-SchedulerPostReboot.sh >> /root/PostRebootConfig.log 2>&1" | crontab -
            $AWS s3 cp s3://${S3InstallBucket}/${S3InstallFolder}/scripts/config.cfg /root/
            $AWS s3 cp s3://${S3InstallBucket}/${S3InstallFolder}/scripts/requirements.txt /root/
            $AWS s3 cp s3://${S3InstallBucket}/${S3InstallFolder}/scripts/Scheduler.sh /root/
            $AWS s3 cp s3://${S3InstallBucket}/${S3InstallFolder}/scripts/SchedulerPostReboot.sh /root/
            chmod +x /root/Scheduler.sh
            chmod +x /root/SchedulerPostReboot.sh
            /root/Scheduler.sh ${EFSDataDns} ${EFSAppsDns} >> /root/Scheduler.sh.log 2>&1

  EIPAssociationToScheduler:
    DependsOn: SchedulerEC2Host
    Type: AWS::EC2::EIPAssociation
    Properties:
      EIP: !Ref SchedulerPublicIP
      InstanceId: !Ref SchedulerEC2Host

  SchedulerDnsRecord:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !Ref UpdateDnsLambdaArn
      Hostname: "scheduler"
      Domain: !Ref SocaDomain
      HostedZoneId: !Ref HostedZoneId
      Type: 'A'
      PrivateIP: !GetAtt SchedulerEC2Host.PrivateIp

Outputs:
  SchedulerInstanceId:
    Value: !Ref SchedulerEC2Host
  SchedulerPrivateIP:
    Value: !GetAtt SchedulerEC2Host.PrivateIp
  SchedulerPrivateDnsName:
    Value: !GetAtt SchedulerEC2Host.PrivateDnsName
