AWSTemplateFormatVersion: 2010-09-09
Description: (SOCA) - Manage security stack.
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id

  SocaDomain:
    Type: String

  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id

  AL2ImageId:
    Type: AWS::EC2::Image::Id

  SSHKeyPair:
    Type: AWS::EC2::KeyPair::KeyName

  ProxyInstanceType:
    Type: String

  ProxySubnetId:
    Type: AWS::EC2::Subnet::Id

  NoProxy:
    Type: String

  UpdateDnsLambdaArn:
    Type: String

  ClientIp:
    Type: String

  PrefixListId:
    Type: String

  ClusterId:
    Type: String

  S3InstallBucket:
    Type: String

  S3InstallFolder:
    Type: String

Conditions:
  HasClientIp:
    !Not [ !Equals [ !Ref ClientIp, '' ] ]

  HasPrefixListId:
    !Not [ !Equals [ !Ref PrefixListId, '' ] ]

Resources:

  #============================================================================
  # Proxy server
  #============================================================================

  ProxyEC2Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT10M
    Properties:
      ImageId: !Ref AL2ImageId
      DisableApiTermination: false
      InstanceType: !Ref ProxyInstanceType
      IamInstanceProfile:
        Ref: ProxyIAMInstanceProfile
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: 150
            VolumeType: gp2
            Encrypted: true

      KeyName: !Ref SSHKeyPair

      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - !Ref ProxySecurityGroup
          SubnetId: !Ref ProxySubnetId

      Tags:
        - Key: Name
          Value: !Sub ${ClusterId}-Proxy
        - Key: soca:KeepForever
          Value: true
        - Key: soca:ClusterId
          Value: !Sub ${ClusterId}
        - Key: soca:NodeType
          Value: proxy
        - Key: soca:BackupPlan
          Value: !Sub ${ClusterId}

      UserData:
          "Fn::Base64": !Sub |
            #!/bin/bash -xe

            # Signal Cloudformation if the instance creates successfully or not
            yum -y install -y aws-cfn-bootstrap
            function on_exit {
                /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ProxyEC2Instance --region ${AWS::Region} || true
            }
            trap on_exit EXIT

            yum -y update --security

            # Disable automatic motd update
            /usr/sbin/update-motd --disable
            rm -f /etc/cron.d/update-motd
            rm -f /etc/update-motd.d/*

            # Set up motd
            amazon-linux-extras install -y epel
            yum -y install figlet
            figlet -f slant "SOCA Proxy" > /etc/motd
            echo -e "Cluster: ${ClusterId}
            Configuration: /etc/squid/squid.conf
                           /etc/squid/soca.conf
            Logs: /var/log/squid/access.log
            " >> /etc/motd

            echo export "SOCA_CONFIGURATION=${ClusterId}" >> /etc/environment
            echo export "AWS_DEFAULT_REGION=${AWS::Region}" >> /etc/environment
            echo export "SOCA_INSTALL_BUCKET=${S3InstallBucket}" >> /etc/environment
            echo export "SOCA_INSTALL_BUCKET_FOLDER=${S3InstallFolder}" >> /etc/environmentenvironment
            echo export "SOCA_DOMAIN=${SocaDomain}" >> /etc/environment
            echo export "SOCA_HOSTED_ZONE_ID=${HostedZoneId}" >> /etc/environment
            source /etc/environment

            AWS=$(which aws)
            
            # Tag EBS disks manually as CFN ASG does not support it
            AWS_AVAIL_ZONE=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone)
            AWS_REGION="`echo \"$AWS_AVAIL_ZONE\" | sed "s/[a-z]$//"`"
            AWS_INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
            EBS_IDS=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values="$AWS_INSTANCE_ID" --region $AWS_REGION --query "Volumes[*].[VolumeId]" --out text | tr "\n" " ")
            aws ec2 create-tags --resources $EBS_IDS --region $AWS_REGION --tags Key=Name,Value="${ClusterId} Root Disk" "Key=soca:ClusterId,Value=${ClusterId}"

            # Tag Network Adapter for the Proxy
            ENI_IDS=$(aws ec2 describe-network-interfaces --filters Name=attachment.instance-id,Values="$AWS_INSTANCE_ID" --region $AWS_REGION --query "NetworkInterfaces[*].[NetworkInterfaceId]" --out text | tr "\n" " ")
            aws ec2 create-tags --resources $ENI_IDS --region $AWS_REGION --tags Key=Name,Value="${ClusterId} Proxy Network Adapter" "Key=soca:ClusterId,Value=${ClusterId}"

            # Configure using ansible
            amazon-linux-extras install ansible2
            aws s3 cp --recursive s3://${S3InstallBucket}/${S3InstallFolder}/playbooks/ /root/playbooks/
            cd /root/playbooks
            ansible-playbook proxy.yml -e Region=${AWS::Region} -e Domain=${SocaDomain} -e S3InstallBucket=${S3InstallBucket} -e S3InstallFolder=${S3InstallFolder} -e ClusterId=${ClusterId} &> /root/ansible.log

            /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource ProxyEC2Instance --region ${AWS::Region} || true

            if ! needs-restarting -r; then
              reboot
            fi

  ProxyDnsRecord:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !Ref UpdateDnsLambdaArn
      Hostname: "proxy"
      Domain: !Ref SocaDomain
      HostedZoneId: !Ref HostedZoneId
      Type: 'A'
      PrivateIP: !GetAtt ProxyEC2Instance.PrivateIp

  #============================================================================
  # Proxy Security Group
  #============================================================================

  ProxySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: SG For Proxy Host
      Tags:
        - Key: Name
          Value: !Sub ${ClusterId}-ProxySG
        - Key: soca:ClusterId
          Value: !Ref ClusterId

  ProxyOutboundHTTP:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0
      GroupId: !GetAtt ProxySecurityGroup.GroupId
      Description: Internet

  ProxyOutboundHTTPS:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0
      GroupId: !GetAtt ProxySecurityGroup.GroupId
      Description: Internet

  ProxyIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub "ec2.${AWS::URLSuffix}"
                - !Sub "ssm.${AWS::URLSuffix}"
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore # Support for SSM

      Policies:
        - PolicyName: ProxyPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":s3:::", !Ref S3InstallBucket , "/*" ] ]
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":s3:::", !Ref S3InstallBucket] ]

              - Effect: Allow
                Action:
                  - ec2:CreateTags
                Resource:
                  - !Sub "arn:${AWS::Partition}:ec2:*:${AWS::AccountId}:volume/*"
                  - !Sub "arn:${AWS::Partition}:ec2:*:${AWS::AccountId}:network-interface/*"

              - Effect: Allow
                Action:
                  - ec2:DescribeVolumes
                  - ec2:DescribeNetworkInterfaces
                Resource: "*"

              - Effect: Allow
                Action:
                  - route53:ChangeResourceRecordSets
                Resource: "*"

              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:PutParameter
                Resource:
                  - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ClusterId}/proxy/cacert"

  ProxyIAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ProxyIAMRole

Outputs:
  ProxyPrivateDnsName:
    Value: !Sub "proxy.${SocaDomain}"
  NoProxy:
    Value: !Ref NoProxy
  ProxyCACertParameter:
    Value: !Sub "/${ClusterId}/proxy/cacert"
