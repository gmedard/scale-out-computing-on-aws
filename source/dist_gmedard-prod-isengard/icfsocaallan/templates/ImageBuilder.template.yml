AWSTemplateFormatVersion: 2010-09-09
Description: (SOCA) - Create custom AMIs
Parameters:
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: VPC CIDR (/16)  Block (eg 10.0.0.0/16)
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/16'

  ClusterId:
    Type: String
  
  S3InstallBucket:
    Type: String
  
  S3InstallFolder:
    Type: String
  
  VpcId:
    Type: String
  
  PublicSubnet1:
    Type: String

  ClientIp:
    Type: String
    Description: Default IP(s) allowed to directly SSH into the scheduler and access ElasticSearch. 0.0.0.0/0 means ALL INTERNET access. You probably want to change it with your own IP/subnet (x.x.x.x/32 for your own ip or x.x.x.x/24 for range. Replace x.x.x.x with your own PUBLIC IP. You can get your public IP using tools such as https://ifconfig.co/). Make sure to keep it restrictive!
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})|(^$)'
    ConstraintDescription: ClientIP must be a valid IP or network range of the form x.x.x.x/x. If you want to add everyone (not recommended) use 0.0.0.0/0 otherwise specify your IP/NETMASK (e.g x.x.x/32 or x.x.x.x/24 for subnet range)

  PrefixListId:
    Type: String
    Description: Prefix list with IP(s) allowed to directly SSH into the scheduler and access ElasticSearch.
    AllowedPattern: '(pl-([a-zA-Z0-9]+))|(^$)'
    ConstraintDescription: PrefixListId must be blank or pl-[a-z][A-Z][0-9]+
  
  ImageBuilderSecurityGroupId:
    Type: String

  SSHKeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Default SSH pem keys used to SSH into the scheduler
  
  AmazonLinux2AMI:
    Type: String
  
  CentOS7AMI:
    Type: String
  
  RHEL7AMI:
    Type: String
  
  EFSDataDns:
    Type: String
  
  EFSAppsDns:
    Type: String
  
  SocaVersion:
    Type: String
  
Conditions:
  HasClientIp:
    !Not [ !Equals [ !Ref ClientIp, '' ] ]

  HasPrefixListId:
    !Not [ !Equals [ !Ref PrefixListId, '' ] ]

Resources:
  #============================================================================
  # EC2 Image Builder notifications lambda
  #============================================================================
  PipelineNotificationsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: PipelineNotifications
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DeleteLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":logs:", !Ref "AWS::Region", ":", !Ref  "AWS::AccountId", ":log-group:/aws/lambda/", !Ref ClusterId, "*"] ]
              - Effect: Allow
                Action:
                  - imagebuilder:*
                Resource:
                  - '*'

  PipelineNotificationsLambdaSnsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PipelineNotificationsLambda.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 'sns.amazonaws.com'
      SourceArn: !Ref PipelineNotificationsSns

  PipelineNotificationsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Handle EC2 ImageBuilder pipeline notifications
      FunctionName: !Sub "${ClusterId}-PipelineNotifications"
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt PipelineNotificationsLambdaRole.Arn
      Runtime: python3.7
      Timeout: 180
      Tags:
        - Key: soca:ClusterId
          Value: !Ref ClusterId
      Code:
        ZipFile: !Sub |
          import cfnresponse
          import boto3
          import json
          import logging
          from os import environ
          import pprint
          '''
          Create/delete DNS entry
          '''
          logging.getLogger().setLevel(logging.INFO)
          pp = pprint.PrettyPrinter(indent=4)
          def lambda_handler(event, context):
              try:
                  logging.info("event: {}".format(pp.pformat(event)))

                  logging.info("environ:\n{}".format(environ))
        
                  for record in event['Records']:
                      handle_record(record)
              except Exception as e:
                  logging.exception(str(e))

          def handle_record(record):
              logging.info("record:\n{}".format(pp.pformat(record)))

              region = environ['AWS_REGION']
              logging.info("region: " + region)

              eventSource = record['EventSource']

              snsMessage = record['Sns']['Message']
              message = json.loads(snsMessage, strict=False)
              logging.info("SNS message:\n{}".format(pp.pformat(message)))

              pipelineArn = message['sourcePipelineArn']
              logging.info("pipelineArn: " + pipelineArn)

              state = message['state']['status']
              logging.info("state: " + state)
              if state in ['FAILED']:
                  return
              if state not in ['AVAILABLE']:
                  return

              buildVersion = message['buildVersion']
              logging.info('buildVersion: {}'.format(buildVersion))
    
              amis = message['outputResources']['amis']
              for ami in amis:
                  logging.info("ami details:\n{}".format(ami))
                  imageRegion = ami['region']
                  imageId = ami['image']
                  logging.info('{} imageId: {}'.format(imageRegion, imageId))
                  if imageRegion != region:
                      continue

                  # Register the AMI with the scheduler

  #============================================================================
  # SNS topic for EC2 Image Builder notifications
  # Triggers the EC2 Image Builder notifications lambda
  #============================================================================

  PipelineNotificationsSns:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt PipelineNotificationsLambda.Arn
      Tags:
        - Key: Name
          Value: !Sub ${ClusterId}-PipelineNotifications
        - Key: soca:ClusterId
          Value: !Ref ClusterId

  #============================================================================
  # Lambda to run an EC2 ImageBuilder Pipeline
  # Used in custom resources for each pipeline
  #============================================================================

  StartPipelineLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: StartPipeline
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DeleteLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":logs:", !Ref "AWS::Region", ":", !Ref  "AWS::AccountId", ":log-group:/aws/lambda/", !Ref ClusterId, "*"] ]

              - Effect: Allow
                Action:
                  - imagebuilder:StartImagePipelineExecution
                Resource:
                  - '*'

  StartPipelineLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Run EC2 ImageBuilder pipeline
      FunctionName: !Sub "${ClusterId}-StartImagePipeline"
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt StartPipelineLambdaRole.Arn
      Runtime: python3.7
      Timeout: 180
      Tags:
        - Key: soca:ClusterId
          Value: !Ref ClusterId
      Code:
        ZipFile: !Sub |
          import cfnresponse
          import boto3
          import logging
          from os import environ
          '''
          Create/delete DNS entry
          '''
          logging.getLogger().setLevel(logging.INFO)
          def lambda_handler(event, context):
            try:
              logging.info("event: {}".format(event))
              requestType = event['RequestType']
              if requestType in ['Delete']:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, "")
                  return

              properties = event['ResourceProperties']
              expected_properties = ['PipelineArn']
              error_message = ""
              for property in expected_properties:
                try:
                  value = event['ResourceProperties'][property]
                except:
                  error_message += "Missing {} property. ".format(property)
              if error_message:
                raise KeyError(error_message)

              imagebuilder_client = boto3.client('imagebuilder')
              response = imagebuilder_client.start_image_pipeline_execution(
                imagePipelineArn=properties['PipelineArn'],
              )
              imageBuildVersionArn = response['imageBuildVersionArn']
              imageBuildVersionUrl = "https://console.aws.amazon.com/imagebuilder/home?region={}#viewImages/{}".format(environ['AWS_REGION'], imageBuildVersionArn)
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {'imageBuildVersionArn': imageBuildVersionArn, 'imageBuildVersionUrl': imageBuildVersionUrl}, "{}".format(imageBuildVersionArn))
            except Exception as e:
              logging.exception(str(e))
              cfnresponse.send(event, context, cfnresponse.FAILED, {'error': str(e)}, str(e))

  #============================================================================
  # EC2 ImageBuilder instance role
  #============================================================================
  ImageBuilderInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub "ec2.${AWS::URLSuffix}"
                - !Sub "ssm.${AWS::URLSuffix}"
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore # Support for SSM
        - arn:aws:iam::aws:policy/EC2InstanceProfileForImageBuilder # Support for EC2 Image Builder
      Policies:
        - PolicyName: ImageBuilderPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:ListDocuments
                  - ssm:ListDocumentVersions
                  - ssm:DescribeDocument
                  - ssm:GetDocument
                  - ssm:DescribeInstanceInformation
                  - ssm:DescribeDocumentParameters
                  - ssm:DescribeInstanceProperties
                  - ssm:ListCommands
                  - ssm:GetCommandInvocation
                  - ssm:DescribeAutomationExecutions
                Resource: "*"

              - Effect: Allow
                Action:
                  - ec2:CreateImage
                Resource: "*"

              - Effect: Allow
                Action:
                  - ssm:PutParameter
                Resource: "*"

              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                Resource: "*"

              - Effect: Allow
                Action:
                  - s3:Put*
                Resource:
                  - !Sub "arn:aws:s3:::${S3InstallBucket}/${S3InstallFolder}/ImageBuilder/logs"
                  - !Sub "arn:aws:s3:::${S3InstallBucket}/${S3InstallFolder}/ImageBuilder/logs/*"

  ImageBuilderInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ImageBuilderInstanceRole

  ImageBuilderInfrastructure:
    Type: AWS::ImageBuilder::InfrastructureConfiguration
    Properties:
      Name: !Sub ${ClusterId}-ImageBuilderInfrastructure
      InstanceProfileName: !Ref ImageBuilderInstanceProfile
      InstanceTypes:
        - m5.large
      KeyPair: !Ref SSHKeyPair
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref ImageBuilderSecurityGroupId
      Tags:
        'soca:ClusterId': !Ref ClusterId
      ResourceTags:
        'soca:ClusterId': !Ref ClusterId
      TerminateInstanceOnFailure: false
      SnsTopicArn: !Ref PipelineNotificationsSns
      Logging:
        S3Logs:
          S3BucketName: !Sub "${S3InstallBucket}"
          S3KeyPrefix: !Sub "${S3InstallFolder}/ImageBuilder/logs"

  SOCAComponent:
    Type: AWS::ImageBuilder::Component
    Properties:
      Name: !Sub "${ClusterId}-SOCAComponent"
      Platform: Linux
      Version: 1.0.0
      Tags: 
        Name: !Sub ${ClusterId}-SOCAComponent
        'soca:ClusterId': !Ref ClusterId
      Data: !Sub |
        name: Configure-Centos-7
        description: Install packages
        schemaVersion: 1.0

        phases:
          - name: build
            steps:
              - name: initial-configuration
                action: ExecuteBash
                inputs:
                  commands:
                    - |
                      set -ex

                      BaseOS=centos7

                      echo export "EFS_DATA=${EFSDataDns}"  > /etc/environment
                      echo export "EFS_APPS=${EFSAppsDns}" >> /etc/environment
                      echo export "SOCA_BASE_OS=$BaseOS"   >> /etc/environment
                      echo export "SOCA_CONFIGURATION=${ClusterId}" >> /etc/environment
                      echo export "AWS_DEFAULT_REGION=${AWS::Region}" >> /etc/environment
                      echo export "SOCA_INSTALL_BUCKET=${S3InstallBucket}" >> /etc/environment
                      echo export "SOCA_INSTALL_BUCKET_FOLDER=${S3InstallFolder}" >> /etc/environment
                      echo export "SOCA_VERSION=${SocaVersion}" >> /etc/environment
                      source /etc/environment

                      # Install pip
                      if ! which pip2.7; then
                        if [ "$BaseOS" == "centos7" ] || [ "$BaseOS" == "rhel7" ]; then
                          EASY_INSTALL=$(which easy_install-2.7)
                          $EASY_INSTALL pip
                        fi
                      fi
                      PIP=$(which pip2.7)

                      AWS=$(which aws)

                      export IMAGE_BUILDER_WORKDIR=/tmp/soca/${ClusterId}
                      mkdir -p $IMAGE_BUILDER_WORKDIR
                      cd $IMAGE_BUILDER_WORKDIR
                      $AWS s3 cp --recursive s3://${S3InstallBucket}/${S3InstallFolder}/ $IMAGE_BUILDER_WORKDIR
                      chmod -R +x scripts
                      ./scripts/ImageBuilder/configure-soca.sh

  EDAComponent:
    Type: AWS::ImageBuilder::Component
    Properties:
      Name: !Sub "${ClusterId}-EDAComponent"
      Platform: Linux
      Version: 1.0.0
      Tags: 
        Name: !Sub ${ClusterId}-EDAComponent
        'soca:ClusterId': !Ref ClusterId
      Data: !Sub |
        name: install-eda-packages
        description: Install packages
        schemaVersion: 1.0

        phases:
          - name: build
            steps:
              - name: install-eda-packages
                action: ExecuteBash
                inputs:
                  commands:
                    - |
                      set -ex

                      BaseOS=centos7

                      # Install awscli
                      if ! which pip2.7; then
                        if [ "$BaseOS" == "centos7" ] || [ "$BaseOS" == "rhel7" ]; then
                          EASY_INSTALL=$(which easy_install-2.7)
                          $EASY_INSTALL pip
                        fi
                      fi
                      PIP=$(which pip2.7)
                      $PIP install --upgrade awscli
                      AWS=$(which aws)

                      export IMAGE_BUILDER_WORKDIR=/tmp/soca/${ClusterId}
                      mkdir -p $IMAGE_BUILDER_WORKDIR
                      cd $IMAGE_BUILDER_WORKDIR
                      $AWS s3 cp --recursive s3://${S3InstallBucket}/${S3InstallFolder}/ $IMAGE_BUILDER_WORKDIR
                      chmod -R +x scripts
                      ./scripts/ImageBuilder/configure-eda.sh

  DesktopComponent:
    Type: AWS::ImageBuilder::Component
    Properties:
      Name: !Sub "${ClusterId}-DesktopComponent"
      Platform: Linux
      Version: 1.0.0
      Tags: 
        Name: !Sub ${ClusterId}-DesktopComponent
        'soca:ClusterId': !Ref ClusterId
      Data: !Sub |
        name: install-desktop-packages
        description: Install packages
        schemaVersion: 1.0

        phases:
          - name: build
            steps:
              - name: install-desktop-packages
                action: ExecuteBash
                inputs:
                  commands:
                    - |
                      set -ex

                      BaseOS=centos7

                      # Install awscli
                      if ! which pip2.7; then
                        if [ "$BaseOS" == "centos7" ] || [ "$BaseOS" == "rhel7" ]; then
                          EASY_INSTALL=$(which easy_install-2.7)
                          $EASY_INSTALL pip
                        fi
                      fi
                      PIP=$(which pip2.7)
                      $PIP install --upgrade awscli
                      AWS=$(which aws)

                      export IMAGE_BUILDER_WORKDIR=/tmp/soca/${ClusterId}
                      mkdir -p $IMAGE_BUILDER_WORKDIR
                      cd $IMAGE_BUILDER_WORKDIR
                      $AWS s3 cp --recursive s3://${S3InstallBucket}/${S3InstallFolder}/ $IMAGE_BUILDER_WORKDIR
                      chmod -R +x scripts
                      ./scripts/ImageBuilder/configure-desktop.sh

  #============================================================================
  # SOCA AMI
  #============================================================================

  Centos7SOCAImageRecipe:
    Type: AWS::ImageBuilder::ImageRecipe
    Properties:
      Name: !Sub "${ClusterId}-Centos7SOCAImageRecipe"
      Version: 1.0.0
      Description: Configure Centos 7 AMI for SOCA Node
      ParentImage: !Sub 'arn:aws:imagebuilder:${AWS::Region}:aws:image/centos-linux-7-minimal-x86/x.x.x'
      Components:
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/update-linux/1.0.0"
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/update-linux-kernel-mainline/1.0.0"
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/aws-cli-version-2-linux/1.0.0"
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/amazon-cloudwatch-agent-linux/1.0.0"
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/python-3-linux/1.0.2"
        - ComponentArn: !Ref SOCAComponent
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            Encrypted: true
            DeleteOnTermination: true
            #VolumeSize: 30
      Tags: 
        'soca:ClusterId': !Ref ClusterId

  Centos7SOCADistributionConfiguration:
    Type: AWS::ImageBuilder::DistributionConfiguration
    Properties:
      Name: !Sub "${ClusterId}-Centos7-SOCA-Distr-Config"
      Distributions: 
        - Region: !Ref "AWS::Region"
          AmiDistributionConfiguration:
            Name: !Sub '${ClusterId}-Centos7-SOCA-{{ imagebuilder:buildDate }}'
            Description: "Preconfigured SOCA execution node"
            AmiTags:
              Name: !Sub '${ClusterId}-Centos7-SOCA-{{ imagebuilder:buildDate }}'
              'soca:ClusterId': !Ref ClusterId
      Tags: 
        Name: !Sub ${ClusterId}-ImageBuilderImage
        'soca:ClusterId': !Ref ClusterId

  Centos7SOCAPipeline:
    Type: AWS::ImageBuilder::ImagePipeline
    Properties: 
      Name: !Sub "${ClusterId}-Centos7SOCAPipeline"
      ImageRecipeArn: !Ref Centos7SOCAImageRecipe
      DistributionConfigurationArn: !Ref Centos7SOCADistributionConfiguration
      EnhancedImageMetadataEnabled: true
      InfrastructureConfigurationArn: !Ref ImageBuilderInfrastructure
      Status: ENABLED
      # Schedule:
      #   PipelineExecutionStartCondition: EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE
      #   #ScheduleExpression: '0 0 * * *'
      Tags:
        'soca:ClusterId': !Ref ClusterId

  Centos7SOCAPipelineExecution:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt StartPipelineLambda.Arn
      PipelineArn: !Ref Centos7SOCAPipeline

  #============================================================================
  # SOCA Desktop AMI
  #============================================================================

  Centos7SOCADesktopImageRecipe:
    Type: AWS::ImageBuilder::ImageRecipe
    Properties:
      Name: !Sub "${ClusterId}-Centos7SOCADesktopImageRecipe"
      Version: 1.0.0
      Description: Configure Centos 7 AMI for SOCA Desktop Node
      ParentImage: !Sub 'arn:aws:imagebuilder:${AWS::Region}:aws:image/centos-linux-7-minimal-x86/x.x.x'
      Components:
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/update-linux/1.0.0"
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/update-linux-kernel-mainline/1.0.0"
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/aws-cli-version-2-linux/1.0.0"
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/amazon-cloudwatch-agent-linux/1.0.0"
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/python-3-linux/1.0.2"
        - ComponentArn: !Ref SOCAComponent
        - ComponentArn: !Ref DesktopComponent
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            Encrypted: true
            DeleteOnTermination: true
            #VolumeSize: 15
      Tags:
        'soca:ClusterId': !Ref ClusterId

  Centos7SOCADesktopDistributionConfiguration:
    Type: AWS::ImageBuilder::DistributionConfiguration
    Properties:
      Name: !Sub "${ClusterId}-Centos7-SOCA-Desktop-Distr-Config"
      Distributions: 
        - Region: !Ref "AWS::Region"
          AmiDistributionConfiguration:
            Name: !Sub '${ClusterId}-Centos7-SOCA-Desktop-{{ imagebuilder:buildDate }}'
            Description: "Preconfigured SOCA Desktop execution node"
            AmiTags:
              Name: !Sub '${ClusterId}-Centos7-SOCA-Desktop-{{ imagebuilder:buildDate }}'
              'soca:ClusterId': !Ref ClusterId
      Tags: 
        Name: !Sub ${ClusterId}-SOCA-Desktop-ImageBuilderImage
        'soca:ClusterId': !Ref ClusterId

  Centos7SOCADesktopPipeline:
    Type: AWS::ImageBuilder::ImagePipeline
    Properties: 
      Name: !Sub "${ClusterId}-Centos7SOCADesktopPipeline"
      ImageRecipeArn: !Ref Centos7SOCADesktopImageRecipe
      DistributionConfigurationArn: !Ref Centos7SOCADesktopDistributionConfiguration
      EnhancedImageMetadataEnabled: true
      InfrastructureConfigurationArn: !Ref ImageBuilderInfrastructure
      Status: ENABLED
      # Schedule:
      #   PipelineExecutionStartCondition: EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE
      Tags:
        'soca:ClusterId': !Ref ClusterId

  Centos7SOCADesktopPipelineExecution:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt StartPipelineLambda.Arn
      PipelineArn: !Ref Centos7SOCADesktopPipeline

  #============================================================================
  # SOCA EDA AMI
  #============================================================================

  Centos7EDAImageRecipe:
    Type: AWS::ImageBuilder::ImageRecipe
    Properties:
      Name: !Sub "${ClusterId}-Centos7EDAImageRecipe"
      Version: 1.0.0
      Description: Configure Centos 7 AMI for SOCA EDA Node
      ParentImage: !Sub 'arn:aws:imagebuilder:${AWS::Region}:aws:image/centos-linux-7-minimal-x86/x.x.x'
      Components:
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/update-linux/1.0.0"
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/update-linux-kernel-mainline/1.0.0"
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/aws-cli-version-2-linux/1.0.0"
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/amazon-cloudwatch-agent-linux/1.0.0"
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/python-3-linux/1.0.2"
        - ComponentArn: !Ref SOCAComponent
        - ComponentArn: !Ref EDAComponent
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            Encrypted: true
            DeleteOnTermination: true
            #VolumeSize: 30
      Tags:
        'soca:ClusterId': !Ref ClusterId

  Centos7EDADistributionConfiguration:
    Type: AWS::ImageBuilder::DistributionConfiguration
    Properties:
      Name: !Sub "${ClusterId}-Centos7-EDA-Distr-Config"
      Distributions: 
        - Region: !Ref "AWS::Region"
          AmiDistributionConfiguration:
            Name: !Sub '${ClusterId}-Centos7-EDA-{{ imagebuilder:buildDate }}'
            Description: "Preconfigured SOCA EDA execution node"
            AmiTags:
              Name: !Sub '${ClusterId}-Centos7-EDA-{{ imagebuilder:buildDate }}'
              'soca:ClusterId': !Ref ClusterId
      Tags: 
        Name: !Sub ${ClusterId}-ImageBuilderImage
        'soca:ClusterId': !Ref ClusterId

  Centos7EDAPipeline:
    Type: AWS::ImageBuilder::ImagePipeline
    Properties: 
      Name: !Sub "${ClusterId}-Centos7EDAPipeline"
      ImageRecipeArn: !Ref Centos7EDAImageRecipe
      DistributionConfigurationArn: !Ref Centos7EDADistributionConfiguration
      EnhancedImageMetadataEnabled: true
      InfrastructureConfigurationArn: !Ref ImageBuilderInfrastructure
      Status: ENABLED
      # Schedule:
      #   PipelineExecutionStartCondition: EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE
      Tags:
        'soca:ClusterId': !Ref ClusterId

  Centos7EDAPipelineExecution:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt StartPipelineLambda.Arn
      PipelineArn: !Ref Centos7EDAPipeline

  #============================================================================
  # SOCA EDA Desktop AMI
  #============================================================================

  Centos7EDADesktopImageRecipe:
    Type: AWS::ImageBuilder::ImageRecipe
    Properties:
      Name: !Sub "${ClusterId}-Centos7EDADesktopImageRecipe"
      Version: 1.0.0
      Description: Configure Centos 7 AMI for SOCA EDA Desktop Node
      ParentImage: !Sub 'arn:aws:imagebuilder:${AWS::Region}:aws:image/centos-linux-7-minimal-x86/x.x.x'
      Components:
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/update-linux/1.0.0"
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/update-linux-kernel-mainline/1.0.0"
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/aws-cli-version-2-linux/1.0.0"
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/amazon-cloudwatch-agent-linux/1.0.0"
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/python-3-linux/1.0.2"
        - ComponentArn: !Ref SOCAComponent
        - ComponentArn: !Ref EDAComponent
        - ComponentArn: !Ref DesktopComponent
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            Encrypted: true
            DeleteOnTermination: true
            VolumeSize: 15
      Tags:
        'soca:ClusterId': !Ref ClusterId

  Centos7EDADesktopDistributionConfiguration:
    Type: AWS::ImageBuilder::DistributionConfiguration
    Properties:
      Name: !Sub "${ClusterId}-Centos7-EDA-Desktop-Distr-Config"
      Distributions: 
        - Region: !Ref "AWS::Region"
          AmiDistributionConfiguration:
            Name: !Sub '${ClusterId}-Centos7-EDA-Desktop-{{ imagebuilder:buildDate }}'
            Description: "Preconfigured SOCA EDA Desktop execution node"
            AmiTags:
              Name: !Sub '${ClusterId}-Centos7-EDA-Desktop-{{ imagebuilder:buildDate }}'
              'soca:ClusterId': !Ref ClusterId
      Tags: 
        Name: !Sub ${ClusterId}-ImageBuilderImage
        'soca:ClusterId': !Ref ClusterId

  Centos7EDADesktopPipeline:
    Type: AWS::ImageBuilder::ImagePipeline
    Properties: 
      Name: !Sub "${ClusterId}-Centos7EDADesktopPipeline"
      ImageRecipeArn: !Ref Centos7EDADesktopImageRecipe
      DistributionConfigurationArn: !Ref Centos7EDADesktopDistributionConfiguration
      EnhancedImageMetadataEnabled: true
      InfrastructureConfigurationArn: !Ref ImageBuilderInfrastructure
      Status: ENABLED
      # Schedule:
      #   PipelineExecutionStartCondition: EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE
      Tags:
        'soca:ClusterId': !Ref ClusterId

  Centos7EDADesktopPipelineExecution:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt StartPipelineLambda.Arn
      PipelineArn: !Ref Centos7EDADesktopPipeline

  #============================================================================
  # RHEL7 EDA AMI
  #============================================================================

  RHEL7EDAImageRecipe:
    Type: AWS::ImageBuilder::ImageRecipe
    Properties:
      Name: !Sub "${ClusterId}-RHEL7EDAImageRecipe"
      Version: 1.0.0
      Description: Configure Redhat 7 AMI for SOCA EDA Node
      ParentImage: !Sub 'arn:aws:imagebuilder:${AWS::Region}:aws:image/red-hat-enterprise-linux-7-x86/x.x.x'
      Components: 
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/update-linux/1.0.0"
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/update-linux-kernel-mainline/1.0.0"
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/aws-cli-version-2-linux/1.0.0"
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/amazon-cloudwatch-agent-linux/1.0.0"
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/python-3-linux/1.0.2"
        - ComponentArn: !Ref SOCAComponent
        - ComponentArn: !Ref EDAComponent
      Tags: 
        'soca:ClusterId': !Ref ClusterId

  RHEL7EDADistributionConfiguration:
    Type: AWS::ImageBuilder::DistributionConfiguration
    Properties:
      Name: !Sub "${ClusterId}-RHEL7-EDA-Distr-Config"
      Distributions: 
        - Region: !Ref "AWS::Region"
          AmiDistributionConfiguration:
            Name: !Sub '${ClusterId}-RHEL7-EDA-{{ imagebuilder:buildDate }}'
            Description: "Preconfigured SOCA EDA execution node"
            AmiTags:
              Name: !Sub '${ClusterId}-RHEL7-EDA-{{ imagebuilder:buildDate }}'
              'soca:ClusterId': !Ref ClusterId
      Tags: 
        Name: !Sub ${ClusterId}-ImageBuilderImage
        'soca:ClusterId': !Ref ClusterId

  RHEL7EDAPipeline:
    Type: AWS::ImageBuilder::ImagePipeline
    Properties: 
      Name: !Sub "${ClusterId}-RHEL7EDAPipeline"
      ImageRecipeArn: !Ref RHEL7EDAImageRecipe
      ImageTestsConfiguration:
        ImageTestsEnabled: true
      DistributionConfigurationArn: !Ref RHEL7EDADistributionConfiguration
      EnhancedImageMetadataEnabled: true
      InfrastructureConfigurationArn: !Ref ImageBuilderInfrastructure
      Status: ENABLED
      # Schedule:
      #   PipelineExecutionStartCondition: EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE
      Tags:
        'soca:ClusterId': !Ref ClusterId

  RHEL7EDAPipelineExecution:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt StartPipelineLambda.Arn
      PipelineArn: !Ref RHEL7EDAPipeline

  #============================================================================
  # RHEL7 EDA Desktop AMI
  #============================================================================

  RHEL7EDADesktopImageRecipe:
    Type: AWS::ImageBuilder::ImageRecipe
    Properties:
      Name: !Sub "${ClusterId}-RHEL7EDADesktopImageRecipe"
      Version: 1.0.0
      Description: Configure Redhat 7 AMI for SOCA EDA Desktop Node
      ParentImage: !Sub 'arn:aws:imagebuilder:${AWS::Region}:aws:image/red-hat-enterprise-linux-7-x86/x.x.x'
      Components: 
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/update-linux/1.0.0"
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/update-linux-kernel-mainline/1.0.0"
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/aws-cli-version-2-linux/1.0.0"
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/amazon-cloudwatch-agent-linux/1.0.0"
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/python-3-linux/1.0.2"
        - ComponentArn: !Ref SOCAComponent
        - ComponentArn: !Ref EDAComponent
        - ComponentArn: !Ref DesktopComponent
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            Encrypted: true
            DeleteOnTermination: true
            VolumeSize: 15
      Tags: 
        'soca:ClusterId': !Ref ClusterId

  RHEL7EDADesktopDistributionConfiguration:
    Type: AWS::ImageBuilder::DistributionConfiguration
    Properties:
      Name: !Sub "${ClusterId}-RHEL7-EDA-Desktop-Distr-Config"
      Distributions: 
        - Region: !Ref "AWS::Region"
          AmiDistributionConfiguration:
            Name: !Sub '${ClusterId}-RHEL7-EDA-Desktop-{{ imagebuilder:buildDate }}'
            Description: "Preconfigured SOCA EDA Desktop execution node"
            AmiTags:
              Name: !Sub '${ClusterId}-RHEL7-EDA-Desktop-{{ imagebuilder:buildDate }}'
              'soca:ClusterId': !Ref ClusterId
      Tags: 
        Name: !Sub ${ClusterId}-ImageBuilderImage
        'soca:ClusterId': !Ref ClusterId

  RHEL7EDADesktopPipeline:
    Type: AWS::ImageBuilder::ImagePipeline
    Properties: 
      Name: !Sub "${ClusterId}-RHEL7EDADesktopPipeline"
      ImageRecipeArn: !Ref RHEL7EDADesktopImageRecipe
      ImageTestsConfiguration:
        ImageTestsEnabled: true
      DistributionConfigurationArn: !Ref RHEL7EDADesktopDistributionConfiguration
      EnhancedImageMetadataEnabled: true
      InfrastructureConfigurationArn: !Ref ImageBuilderInfrastructure
      Status: ENABLED
      # Schedule:
      #   PipelineExecutionStartCondition: EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE
      Tags:
        'soca:ClusterId': !Ref ClusterId

  RHEL7EDADesktopPipelineExecution:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt StartPipelineLambda.Arn
      PipelineArn: !Ref RHEL7EDADesktopPipeline

#============================================================================
# Outputs
#============================================================================

Outputs:
  Centos7SOCAImagePipelineUrl:
    Value: !Sub "https://console.aws.amazon.com/imagebuilder/home?region=${AWS::Region}#viewPipeline/${Centos7SOCAPipeline}"
  Centos7SOCAImageRunPipelineCommand:
    Value: !Sub "aws imagebuilder start-image-pipeline-execution --image-pipeline-arn ${Centos7SOCAPipeline}"
  Centos7SOCAImageBuildUrl:
    Value: !GetAtt Centos7SOCAPipelineExecution.imageBuildVersionUrl

  Centos7SOCADesktopImagePipelineUrl:
    Value: !Sub "https://console.aws.amazon.com/imagebuilder/home?region=${AWS::Region}#viewPipeline/${Centos7SOCADesktopPipeline}"
  Centos7SOCADesktopImageRunPipelineCommand:
    Value: !Sub "aws imagebuilder start-image-pipeline-execution --image-pipeline-arn ${Centos7SOCADesktopPipeline}"
  Centos7SOCADesktopImageBuildUrl:
    Value: !GetAtt Centos7SOCADesktopPipelineExecution.imageBuildVersionUrl

  Centos7EDAImagePipelineUrl:
    Value: !Sub "https://console.aws.amazon.com/imagebuilder/home?region=${AWS::Region}#viewPipeline/${Centos7EDAPipeline}"
  Centos7EDAImageRunPipelineCommand:
    Value: !Sub "aws imagebuilder start-image-pipeline-execution --image-pipeline-arn ${Centos7EDAPipeline}"
  Centos7EDAImageBuildUrl:
    Value: !GetAtt Centos7EDAPipelineExecution.imageBuildVersionUrl

  Centos7EDADesktopImagePipelineUrl:
    Value: !Sub "https://console.aws.amazon.com/imagebuilder/home?region=${AWS::Region}#viewPipeline/${Centos7EDADesktopPipeline}"
  Centos7EDADesktopImageRunPipelineCommand:
    Value: !Sub "aws imagebuilder start-image-pipeline-execution --image-pipeline-arn ${Centos7EDADesktopPipeline}"
  Centos7EDADesktopImageBuildUrl:
    Value: !GetAtt Centos7EDADesktopPipelineExecution.imageBuildVersionUrl

  RHEL7EDAImagePipelineUrl:
    Value: !Sub "https://console.aws.amazon.com/imagebuilder/home?region=${AWS::Region}#viewPipeline/${RHEL7EDAPipeline}"
  RHEL7EDAImageRunPipelineCommand:
    Value: !Sub "aws imagebuilder start-image-pipeline-execution --image-pipeline-arn ${RHEL7EDAPipeline}"
  RHEL7EDAImageBuildUrl:
    Value: !GetAtt RHEL7EDAPipelineExecution.imageBuildVersionUrl

  RHEL7EDADesktopImagePipelineUrl:
    Value: !Sub "https://console.aws.amazon.com/imagebuilder/home?region=${AWS::Region}#viewPipeline/${RHEL7EDADesktopPipeline}"
  RHEL7EDADesktopImageRunPipelineCommand:
    Value: !Sub "aws imagebuilder start-image-pipeline-execution --image-pipeline-arn ${RHEL7EDADesktopPipeline}"
  RHEL7EDADesktopImageBuildUrl:
    Value: !GetAtt RHEL7EDADesktopPipelineExecution.imageBuildVersionUrl
